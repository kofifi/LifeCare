@model IEnumerable<LifeCare.ViewModels.HabitVM>
@using System.Linq

@{
    ViewData["Title"] = "Twoje nawyki";
    var allTagsVm = (IEnumerable<TagVM>)(ViewBag.AvailableTags ?? Enumerable.Empty<TagVM>());
    var tagNameById = allTagsVm.ToDictionary(t => t.Id, t => t.Name);
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Twoje nawyki</h2>
        <div>
            <a asp-action="Create" class="btn btn-primary me-2">
                <i class="fa fa-plus"></i>
            </a>
            <a asp-controller="Tags" asp-action="Index" class="btn btn-secondary">Tagi</a>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button id="prevWeek" class="btn btn-outline-secondary">&laquo;</button>
        <div class="d-flex overflow-auto mx-2" id="calendar-scroll"></div>
        <button id="nextWeek" class="btn btn-outline-secondary">&raquo;</button>
    </div>

    <div id="habitTagFilterWrap">
        @await Html.PartialAsync("_TagFilter", new TagFilterVM
        {
            Tags = (IEnumerable<TagVM>)(ViewBag.AvailableTags ?? Enumerable.Empty<TagVM>()),
            SelectedIds = (IEnumerable<int>)(ViewBag.SelectedTagIds ?? Enumerable.Empty<int>()),
            QueryKey = "tagIds",
            Placeholder = "Filtruj nawyki po tagach…",
            SubmitMode = "manual"
        })
    </div>

    <div class="d-flex flex-column gap-3" id="habit-list">
        @foreach (var habit in Model.OrderBy(h => h.Order))
        {
            <div class="habit-card"
                 data-id="@habit.Id"
                 data-tags="@(habit.SelectedTagIds == null ? "" : string.Join(',', habit.SelectedTagIds))"
                 data-target="@habit.TargetQuantity"
                 data-unit="@habit.Unit"
                 data-color="@habit.Color">

                <div class="soft-card d-flex flex-row align-items-center"
                     style="border-left: 10px solid @habit.Color;">
                    <i class="me-3 fa @habit.Icon fa-2x" style="color: @habit.Color;"></i>

                    <div class="flex-grow-1 text-light">
                        <a asp-action="Details"
                           asp-route-id="@habit.Id"
                           class="text-decoration-none text-light">
                            <strong>@habit.Name</strong><br/>
                            <small>@habit.Description</small>

                            @if (habit.SelectedTagIds != null && habit.SelectedTagIds.Any())
                            {
                                <div class="mt-1">
                                    @foreach (var tid in habit.SelectedTagIds)
                                    {
                                        var nm = tagNameById.ContainsKey(tid) ? tagNameById[tid] : tid.ToString();
                                        <span class="badge bg-secondary me-1">@nm</span>
                                    }
                                </div>
                            }

                        </a>
                    </div>

                    <div class="text-end">
                        @if (habit.Type == LifeCare.Models.HabitType.Quantity)
                        {
                            <span class="habit-progress me-2"
                                  data-habit-id="@habit.Id"
                                  style="font-size: 0.9em; color: gray;">
                                0/@habit.TargetQuantity
                            </span>
                            <button class="btn btn-outline-primary btn-sm">+</button>
                        }
                        else
                        {
                            <input type="checkbox" class="form-check-input"/>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="quantityModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title">Dodaj wykonanie</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Zamknij"></button>
            </div>
            <div class="modal-body">
                <p>
                    <strong id="modalHabitName"></strong>
                </p>
                <p>Jednostka: <span id="modalUnit"></span></p>
                <div class="mb-3">
                    <label for="modalQuantityInput" class="form-label">Ilość wykonana dziś</label>
                    <input type="number" class="form-control" id="modalQuantityInput" min="0"/>
                </div>
            </div>
            <div class="modal-footer">
                <button id="confirmQuantityBtn" class="btn btn-success">Zapisz</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

    <script src="~/js/habit.js" asp-append-version="true"></script>
    <script src="~/js/tags.js" asp-append-version="true"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const tfRoot = document.querySelector('#habitTagFilterWrap .tf');
        if (!tfRoot) return;
        const form = tfRoot.closest('form');
        if (!form) return;

        const origSubmit = form.submit ? form.submit.bind(form) : null;
        form.submit = function () {
            try {
                const selected = Array.from(tfRoot.querySelectorAll('.tf-list input[type="checkbox"]:checked'))
                    .map(i => i.value);

                const url = new URL(window.location.href);
                url.searchParams.delete('tagIds');
                selected.forEach(id => url.searchParams.append('tagIds', id));

                window.history.replaceState(null, '', url.toString());

                return false;
            } catch (err) {
                console.error('Habit tag filter submit override error:', err);
                return false;
            }
        };

        form.addEventListener('submit', function (e) { e.preventDefault(); }, true);

        (function initFromUrl(){
            const fromUrl = new URLSearchParams(location.search).getAll('tagIds').map(String);
            if (!fromUrl.length) return;
            tfRoot.querySelectorAll('.tf-list input[type="checkbox"]').forEach(cb => {
                cb.checked = fromUrl.includes(cb.value);
            });
            const evt = new CustomEvent('tagfilter:change', {
                bubbles: true, cancelable: true,
                detail: { section: (tfRoot.dataset.section || 'today'), queryKey: (tfRoot.dataset.queryKey || 'tagIds'), selectedIds: fromUrl, root: tfRoot }
            });
            tfRoot.dispatchEvent(evt);
        })();
    });
</script>

}


@section Styles
{
    <link rel="stylesheet" href="~/css/tags.css" asp-append-version="true"/>
}