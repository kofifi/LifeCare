@model IEnumerable<LifeCare.ViewModels.RoutineVM>
@{
    ViewData["Title"] = "Rutyny";

    Func<IEnumerable<TagVM>?, string> tagIds = ts => ts == null ? "" : string.Join(',', ts.Select(t => t.Id));

    bool IsActive(string? rrule)
    {
        if (string.IsNullOrWhiteSpace(rrule)) return true; // brak UNTIL => aktywna
        var parts = rrule.Split(';', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(p => p.Split('=')).Where(a => a.Length == 2)
            .ToDictionary(a => a[0].ToUpperInvariant(), a => a[1], StringComparer.OrdinalIgnoreCase);
        if (!parts.TryGetValue("UNTIL", out var raw) || string.IsNullOrWhiteSpace(raw)) return true;

        DateTime until;
        if (DateOnly.TryParse(raw, out var d1)) until = d1.ToDateTime(TimeOnly.MinValue, DateTimeKind.Utc);
        else if (DateTime.TryParseExact(raw, "yyyyMMdd'T'HHmmss'Z'", null,
                     System.Globalization.DateTimeStyles.AdjustToUniversal | System.Globalization.DateTimeStyles.AssumeUniversal, out var z))
            until = z;
        else if (DateTime.TryParseExact(raw, "yyyyMMdd", null,
                     System.Globalization.DateTimeStyles.AssumeUniversal | System.Globalization.DateTimeStyles.AdjustToUniversal, out var ymd))
            until = ymd;
        else if (DateTime.TryParse(raw, out var any)) until = any;
        else return true;

        return DateTime.UtcNow.Date <= until.Date;
    }
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Rutyny</h2>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fa fa-plus"></i>
        </a>
        <a asp-controller="Tags" asp-action="Index" class="btn btn-secondary">Tagi</a>
    </div>

    <div class="mb-3">
        <div class="btn-group" role="group" aria-label="Sekcja">
            <button class="btn btn-primary" id="btnToday" data-target="#todaySection">Dzisiejsze rutyny</button>
            <button class="btn btn-outline-primary" id="btnAll" data-target="#allSection">Wszystkie rutyny</button>
        </div>
    </div>

    <section id="todaySection">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <button id="prevWeek" class="btn btn-outline-secondary">&laquo;</button>
            <div class="d-flex overflow-auto mx-2" id="calendar-scroll"></div>
            <button id="nextWeek" class="btn btn-outline-secondary">&raquo;</button>
        </div>

        @await Html.PartialAsync("_TagFilter", new TagFilterVM
        {
            Tags = (IEnumerable<TagVM>)(ViewBag.AvailableTags ?? Enumerable.Empty<TagVM>()),
            SelectedIds = (IEnumerable<int>)(ViewBag.SelectedTagIds ?? Enumerable.Empty<int>()),
            QueryKey = "todayTagIds",
            Placeholder = "Filtruj rutyny po tagach…",
            SubmitMode = "manual",
            Section = "today"
        })


        <div class="d-flex align-items-center justify-content-between">
            <h5 class="mb-2" id="todayTitle">Dzisiejsze rutyny</h5>
        </div>
        <div id="todayList" class="d-flex flex-column gap-3"></div>
    </section>

    <section id="allSection" class="d-none">

        <div class="row g-2 mb-3">
            <div class="col-md-6">
                @await Html.PartialAsync("_TagFilter", new TagFilterVM
                {
                    Tags = (IEnumerable<TagVM>)(ViewBag.AvailableTags ?? Enumerable.Empty<TagVM>()),
                    SelectedIds = (IEnumerable<int>)(ViewBag.SelectedTagIds ?? Enumerable.Empty<int>()),
                    QueryKey = "allTagIds",
                    Placeholder = "Filtruj rutyny po tagach…",
                    SubmitMode = "manual",
                    Section = "all"
                })
            </div>

            <div class="col-md-6" id="statusFilterCol">
                <div class="tf-status-wrap position-relative">
                    <select class="form-select tf-compat-select pe-5" id="statusFilter">
                        <option value="">Wszystkie statusy</option>
                        <option value="active">Aktywne</option>
                        <option value="inactive">Nieaktywne</option>
                    </select>

                    <button type="button" class="tf-status-apply" title="Zastosuj filtr statusu" aria-label="Zastosuj filtr statusu">
                        <i class="fa fa-filter"></i>
                    </button>
                </div>
            </div>
        </div>

        <h5 class="mb-2">Wszystkie rutyny</h5>
        <div class="d-flex flex-column gap-3" id="allList">
            @foreach (var r in Model)
            {
                var active = IsActive(r.RRule);
                <div class="soft-card clickable-card"
                     data-active="@(active ? "1" : "0")"
                     data-tags="@(r.SelectedTagIds == null ? "" : string.Join(',', r.SelectedTagIds))"
                     data-routine-id="@r.Id"
                     data-href="/Routines/Details/@r.Id"
                     style="border-left:8px solid @r.Color;">
                    <div class="d-flex align-items-center justify-content-between gap-3">
                        <div class="d-flex align-items-center gap-3">
                            <i class="fa @r.Icon fa-lg" style="color:@r.Color;"></i>
                            <div>
                                <a asp-action="Details" asp-route-id="@r.Id"
                                   class="text-reset text-decoration-none fw-semibold">
                                    @r.Name
                                </a>
                                @if (!string.IsNullOrWhiteSpace(r.Description))
                                {
                                    <div class="small text-muted">@r.Description</div>
                                }
                                @if (r.TimeOfDay.HasValue)
                                {
                                    <div class="small text-muted">@($"{(int)r.TimeOfDay.Value.TotalHours:0}:{r.TimeOfDay.Value.Minutes:00}")</div>
                                }
                                <div class="small">Status: @(active ? "aktywna" : "nieaktywna")</div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-secondary">@r.Steps.Count kroków</span>

                            <a class="icon-btn"
                               href='@Url.Action("Edit", "Routines", new { id = r.Id })'
                               title="Edytuj"
                               data-no-bubble>
                                <i class="fa fa-edit"></i>
                            </a>

                            <button type="button"
                                    id="deleteButton"
                                    class="icon-btn icon-btn-danger"
                                    title="Usuń"
                                    data-bs-toggle="modal"
                                    data-bs-target="#routineDeleteModal"
                                    data-id="@r.Id"
                                    data-name="@r.Name"
                                    data-no-bubble>
                                <i class="fa fa-trash"></i>
                            </button>

                            <button class="btn btn-outline-secondary btn-sm"
                                    type="button"
                                    data-toggle-all-steps
                                    title="Rozwiń">
                                <i class="fa fa-chevron-down"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mt-2 d-none" data-all-steps>
                        <div class="d-flex flex-column gap-2">
                            @{
                                var idx = 0;
                            }
                            @foreach (var s in r.Steps.OrderBy(x => x.Order))
                            {
                                idx++;
                                <div class="step-card">
                                    @if (s.RotationEnabled)
                                    {
                                        <span class="step-rotation">Rotacja: @(s.RotationMode?.ToUpper())</span>
                                    }
                                    <div class="step-title">
                                        <span class="step-num">@idx</span>
                                        <span>@s.Name</span>
                                    </div>

                                    @if (!string.IsNullOrWhiteSpace(s.Description))
                                    {
                                        <div class="product-note mt-1">@s.Description</div>
                                    }

                                    @if (s.Products != null && s.Products.Count > 0)
                                    {
                                        <div class="mt-2 d-flex flex-column gap-2">
                                            @foreach (var p in s.Products.OrderBy(x => x.Id))
                                            {
                                                <div class="product-row">
                                                    @if (!string.IsNullOrWhiteSpace(p.ImageUrl))
                                                    {
                                                        <img src="@p.ImageUrl" alt="">
                                                    }
                                                    <div class="flex-grow-1">
                                                        <div class="product-name-line">
                                                            <div class="fw-semibold">@p.Name</div>
                                                            @if (!string.IsNullOrWhiteSpace(p.Note))
                                                            {
                                                                <div class="product-note">— @p.Note</div>
                                                            }
                                                        </div>
                                                        @if (!string.IsNullOrWhiteSpace(p.Url))
                                                        {
                                                            <div class="small">
                                                                <a href="@p.Url" target="_blank" rel="noopener">link</a>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
</div>

@await Html.PartialAsync("_RoutineDeleteModal")

@section Styles {
    <link rel="stylesheet" href="~/css/routines.index.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/tags.css" asp-append-version="true"/>
}

@section Scripts {
    <script src="~/js/routines/routines.index.common.js" asp-append-version="true"></script>
    <script src="~/js/routines/routines.index.today.js" asp-append-version="true"></script>
    <script src="~/js/routines/routines.index.all.js" asp-append-version="true"></script>
    <script src="~/js/tags.js" asp-append-version="true"></script>
    <script> window.LC_Routines_Index.init(); </script>
}