@model IEnumerable<LifeCare.ViewModels.RoutineVM>
@{
    ViewData["Title"] = "Rutyny";
    var categories = ViewBag.Categories as List<LifeCare.Models.Category>; // +++
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Rutyny</h2>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fa fa-plus"></i>
        </a>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button id="prevWeek" class="btn btn-outline-secondary">&laquo;</button>
        <div class="d-flex overflow-auto mx-2" id="calendar-scroll"></div>
        <button id="nextWeek" class="btn btn-outline-secondary">&raquo;</button>
    </div>

    <div class="mb-3">
        <select class="form-select" id="categoryFilter">
            <option value="">Wszystkie kategorie</option>
            @if (categories != null)
            {
            foreach (var category in categories)
            {
            <option value="@category.Id">@category.Name</option>
            }
            }
        </select>
    </div>

    <div class="row g-4">
        <div class="col-lg-7">
            <div class="d-flex align-items-center justify-content-between">
                <h5 class="mb-2" id="todayTitle">Dzisiejsze rutyny</h5>
            </div>
            <div id="todayList" class="d-flex flex-column gap-3"></div>
        </div>

        <div class="col-lg-5">
            <h5 class="mb-2">Wszystkie rutyny</h5>
            <div class="d-flex flex-column gap-3">
                @foreach (var r in Model)
                {
                    <div class="soft-card d-flex align-items-center gap-3" data-category-id="@r.CategoryId" style="border-left:8px solid @r.Color;">
                        <i class="fa @r.Icon fa-lg" style="color:@r.Color;"></i>
                        <div class="flex-grow-1">
                            <a asp-action="Details" asp-route-id="@r.Id" class="text-reset text-decoration-none">
                                <strong>@r.Name</strong>
                            </a>
                            @if (!string.IsNullOrWhiteSpace(r.Description))
                            {
                                <div class="small text-muted">@r.Description</div>
                            }
                            @if (r.TimeOfDay.HasValue)
                            {
                                <div class="small text-muted">@($"{(int)r.TimeOfDay.Value.TotalHours:0}:{r.TimeOfDay.Value.Minutes:00}")</div>
                            }
                        </div>
                        <span class="badge bg-secondary">@r.Steps.Count kroków</span>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="dropdown" aria-expanded="false" title="Opcje">
                                <i class="fa fa-ellipsis-vertical"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li>
                                    <a class="dropdown-item" asp-action="Edit" asp-route-id="@r.Id"><i class="fa fa-edit me-2"></i>Edytuj</a>
                                </li>
                                <li>
                                    <button type="button"
                                            class="dropdown-item text-danger"
                                            data-bs-toggle="modal"
                                            data-bs-target="#routineDeleteModal"
                                            data-id="@r.Id"
                                            data-name="@r.Name">
                                        <i class="fa fa-trash me-2"></i>Usuń
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_RoutineDeleteModal")

@section Styles {
    <style>
    .routine-card.completed { opacity:.65; }
    .routine-card .strike { text-decoration: line-through; }
    .step-row.completed { opacity:.7; }
    .step-row .name.completed { text-decoration: line-through; }

    .count-badge { font-size:.85rem; }

    .prod-pill { display:inline-block; padding:.15rem .5rem; border-radius:999px; background:#2e2e2e; font-size:.75rem; margin-right:.25rem; }
</style>
}

@section Scripts {
    <script>
(function(){
    const fmtYmd = (d)=> `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')}`;
    const isSameDay = (a,b)=> a.getFullYear()===b.getFullYear() && a.getMonth()===b.getMonth() && a.getDate()===b.getDate();
    function fmtTimeMaybe(t){
        if (!t) return '';
        if (typeof t === 'string' && t.includes(':')) {
            const [hh, mm] = t.split(':');
            return `${parseInt(hh,10)}:${mm}`;
        }
        return t.toString().slice(0,5);
    }

    function getSelectedCategoryId(){
        const sel = document.getElementById('categoryFilter');
        return sel ? sel.value : '';
    }

    const calendarHost = document.getElementById("calendar-scroll");
    const titleEl = document.getElementById("todayTitle");
    const today = new Date();
    let selectedDate = new Date();
    let weekOffset = 0;

    const expanded = new Set();

    function updateTitle(){
        if (isSameDay(selectedDate, today)) {
            titleEl.textContent = "Dzisiejsze rutyny";
        } else {
            const dd = selectedDate.toLocaleDateString('pl-PL',{ day:'2-digit', month:'2-digit', year:'numeric' });
            titleEl.textContent = `Rutyny z dnia ${dd}`;
        }
    }

    function renderCalendar(){
        calendarHost.innerHTML = "";
        const base = new Date();
        base.setDate(base.getDate() + weekOffset*7);

        const monday = new Date(base);
        const delta = (monday.getDay()+6)%7;
        monday.setDate(monday.getDate()-delta);

        for(let i=0;i<7;i++){
            const d = new Date(monday); d.setDate(d.getDate()+i);
            const btn = document.createElement('button');
            btn.className = 'btn btn-outline-primary mx-1 day-button';
            btn.dataset.date = fmtYmd(d);
            btn.textContent = d.toLocaleDateString('pl-PL', { weekday:'short', day:'2-digit', month:'2-digit' });
            if (isSameDay(d, selectedDate)) btn.classList.add('active');

            btn.addEventListener('click', ()=>{
                document.querySelectorAll('.day-button').forEach(b=>b.classList.remove('active'));
                btn.classList.add('active');
                selectedDate = new Date(btn.dataset.date + "T00:00:00");
                updateTitle();
                loadForDate(btn.dataset.date);
            });
            calendarHost.appendChild(btn);
        }
        updateTitle();
        loadForDate(fmtYmd(selectedDate));
    }

    document.getElementById("prevWeek").addEventListener("click", ()=>{ weekOffset--; renderCalendar(); });
    document.getElementById("nextWeek").addEventListener("click", ()=>{ weekOffset++; renderCalendar(); });

    const catSel = document.getElementById('categoryFilter');
    if (catSel){
        catSel.addEventListener('change', ()=>{
            document.querySelectorAll('[data-category-id]').forEach(el=>{
                const cid = el.getAttribute('data-category-id') || '';
                el.style.display = (!catSel.value || catSel.value === cid) ? '' : 'none';
            });
            loadForDate(fmtYmd(selectedDate));
        });
    }

    async function loadForDate(dateStr){
        const res = await fetch(`/Routines/ForDate?date=${encodeURIComponent(dateStr)}&_=${Date.now()}`);
        const list = await res.json();
        renderList(list, dateStr);
    }

    async function reloadKeepingExpanded(dateStr){
        const res = await fetch(`/Routines/ForDate?date=${encodeURIComponent(dateStr)}&_=${Date.now()}`);
        const list = await res.json();
        renderList(list, dateStr);
    }

    function renderList(list, dateStr){
        const host = document.getElementById('todayList');
        host.innerHTML = "";

        const selectedCat = getSelectedCategoryId();
        const filtered = selectedCat ? list.filter(x => String(x.categoryId||'') === String(selectedCat)) : list;

        if (!filtered.length){
            host.innerHTML = `<div class="soft-card text-muted">Brak rutyn na ten dzień.</div>`;
            return;
        }

        filtered.forEach(r => {
            const card = document.createElement('div');
            card.className = 'soft-card routine-card';
            card.style.borderLeft = `8px solid ${r.color}`;
            card.setAttribute('data-category-id', r.categoryId ?? ''); // +++
            if (r.completed) card.classList.add('completed');

            const header = document.createElement('div');
            header.className = 'd-flex align-items-center justify-content-between gap-3';
            header.innerHTML = `
                <div class="d-flex align-items-center gap-3"  data-category-id="${r.categoryId}" >
                    <i class="fa ${r.icon}" style="color:${r.color}"></i>
                    <div>
                        <div class="fw-semibold ${r.completed ? 'strike' : ''}">${r.name}</div>
                        ${ r.description ? `<div class="small text-muted">${r.description}</div>` : ``}
                        ${ r.timeOfDay ? `<div class="small text-muted">${fmtTimeMaybe(r.timeOfDay)}</div>` : ``}
                    </div>
                </div>
                <div class="d-flex align-items-center gap-2">
                    <span class="badge bg-secondary count-badge">${r.doneSteps}/${r.totalSteps}</span>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="dropdown" aria-expanded="false" title="Opcje">
                            <i class="fa fa-ellipsis-vertical"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="/Routines/Edit/${r.routineId}"><i class="fa fa-edit me-2"></i>Edytuj</a></li>
                            <li>
                                <button type="button"
                                        class="dropdown-item text-danger"
                                        data-bs-toggle="modal"
                                        data-bs-target="#routineDeleteModal"
                                        data-id="${r.routineId}"
                                        data-name="${r.name}">
                                    <i class="fa fa-trash me-2"></i>Usuń
                                </button>
                            </li>
                        </ul>
                    </div>
                    <button class="btn btn-outline-secondary btn-sm" data-toggle-steps title="Rozwiń">
                        <i class="fa fa-chevron-down"></i>
                    </button>
                </div>
            `;

            const body = document.createElement('div');
            body.className = 'mt-2 d-none';
            body.innerHTML = `
                <div class="d-flex align-items-center justify-content-end mb-2">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="checkall_${r.routineId}">
                    </div>
                </div>
                <div class="d-flex flex-column gap-2" data-steps></div>
                <div class="d-flex justify-content-end mt-3">
                    <button class="btn btn-sm ${r.completed ? 'btn-danger' : 'btn-success'}" data-toggle-completed>
                        ${r.completed ? 'Oznacz rutynę jako niewykonaną' : 'Oznacz rutynę jako wykonaną'}
                    </button>
                </div>
            `;

            const stepsHost = body.querySelector('[data-steps]');
            r.steps.forEach(s => {
                const row = document.createElement('div');
                row.className = `p-2 rounded step-row ${ (s.completed || s.skipped) ? 'completed':'' }`;
                row.style.background = 'var(--clr-surface-a20, #2a2a2a)';

                const isAny = s.rotationEnabled && (s.rotationMode || '').toUpperCase() === 'ANY';
                const showStepCheckbox = !isAny;

                const headerHtml = `
                    <div class="d-flex align-items-start justify-content-between">
                      <div class="me-3">
                        <div class="name ${(s.completed || s.skipped) ? 'completed' : ''} fw-semibold">${s.name}</div>
                        ${s.description ? `<div class="small text-muted">${s.description}</div>` : ``}
                      </div>
                      ${showStepCheckbox ? `
                        <div class="form-check mt-1">
                          <input class="form-check-input" type="checkbox" ${s.completed ? 'checked' : ''} data-step-id="${s.stepId}">
                        </div>` : ``}
                    </div>
                `;

                let productsHtml = '';
                if (s.products && s.products.length) {
                    productsHtml = `
                        <div class="mt-2 d-flex flex-column gap-2">
                            ${ s.products.map(p => `
                              <div class="d-flex align-items-start gap-2 border rounded p-2">
                                ${ p.imageUrl ? `<img src="${p.imageUrl}" alt="" style="width:44px;height:44px;object-fit:cover;border-radius:6px;">` : ``}
                                <div class="flex-grow-1">
                                  <div class="fw-semibold">${p.name}</div>
                                  ${ p.note ? `<div class="small text-muted">${p.note}</div>` : ``}
                                  ${ p.url  ? `<div class="small"><a href="${p.url}" target="_blank" rel="noopener">link</a></div>` : ``}
                                </div>
                                ${ isAny ? `
                                  <div class="form-check mt-1">
                                    <input class="form-check-input" type="checkbox"
                                           data-prod-id="${p.productId}"
                                           data-step-id="${s.stepId}"
                                           ${p.completed ? 'checked':''}>
                                  </div>` : ``}
                              </div>
                            `).join('') }
                        </div>
                    `;
                }

                row.innerHTML = `${headerHtml}${productsHtml}`;
                stepsHost.appendChild(row);
            });

            stepsHost.addEventListener('change', async (e)=>{
                if (e.target.matches('input[type=checkbox][data-prod-id]')) {
                    const prodId   = parseInt(e.target.getAttribute('data-prod-id'),10);
                    const stepId   = parseInt(e.target.getAttribute('data-step-id'),10);
                    const completed = e.target.checked;

                    const ok = await fetch('/Routines/ToggleProduct', {
                        method:'POST',
                        headers:{'Content-Type':'application/json'},
                        body: JSON.stringify({ routineId: r.routineId, stepId, productId: prodId, date: dateStr, completed })
                    }).then(x=>x.ok);

                    if (!ok) {
                        e.target.checked = !completed;
                        alert('Błąd zapisu.');
                    } else {
                        await reloadKeepingExpanded(dateStr);
                    }
                    return;
                }

                if (e.target.matches('input[type=checkbox][data-step-id]') && !e.target.hasAttribute('data-prod-id')) {
                    const stepId = parseInt(e.target.getAttribute('data-step-id'),10);
                    const completed = e.target.checked;
                    const ok = await fetch('/Routines/ToggleStep', {
                        method:'POST',
                        headers:{'Content-Type':'application/json'},
                        body: JSON.stringify({ routineId: r.routineId, stepId, date: dateStr, completed, note: null })
                    }).then(x=>x.ok);
                    if (!ok) {
                        e.target.checked = !completed;
                        alert('Błąd zapisu.');
                    } else {
                        await reloadKeepingExpanded(dateStr);
                    }
                }
            });

            const toggleBtn = header.querySelector('[data-toggle-steps]');
            const setArrow = (open) => {
                toggleBtn.innerHTML = `<i class="fa fa-chevron-${open ? 'up':'down'}"></i>`;
            };
            toggleBtn.addEventListener('click', ()=>{
                const isOpen = !body.classList.contains('d-none');
                if (isOpen) {
                    body.classList.add('d-none');
                    expanded.delete(r.routineId);
                    setArrow(false);
                } else {
                    body.classList.remove('d-none');
                    expanded.add(r.routineId);
                    setArrow(true);
                }
            });

            const checkAllEl = body.querySelector(`#checkall_${r.routineId}`);
            const allChecked = (r.totalSteps > 0) && r.steps.every(s => s.completed || s.skipped);
            checkAllEl.checked = allChecked;

            checkAllEl.addEventListener('change', async (e)=>{
                const completed = e.target.checked;
                const ok = await fetch('/Routines/SetAll', {
                    method:'POST',
                    headers:{'Content-Type':'application/json'},
                    body: JSON.stringify({ routineId: r.routineId, date: dateStr, completed })
                }).then(x=>x.ok);
                if (ok) {
                    await reloadKeepingExpanded(dateStr);
                } else {
                    e.target.checked = !completed;
                    alert('Nie udało się zapisać.');
                }
            });

            body.querySelector('[data-toggle-completed]').addEventListener('click', async ()=>{
                const targetCompleted = !r.completed;
                const ok = await fetch('/Routines/Complete', {
                    method:'POST',
                    headers:{'Content-Type':'application/json'},
                    body: JSON.stringify({ routineId: r.routineId, date: dateStr, completed: targetCompleted })
                }).then(x=>x.ok);
                if (ok) await reloadKeepingExpanded(dateStr);
                else alert('Nie udało się zapisać.');
            });

            if (expanded.has(r.routineId)) {
                body.classList.remove('d-none');
                setArrow(true);
            } else {
                setArrow(false);
            }

            card.appendChild(header);
            card.appendChild(body);
            host.appendChild(card);
        });
    }

    renderCalendar();
})();
</script>

    <script>
document.addEventListener('DOMContentLoaded', function () {
    const modalEl = document.getElementById('routineDeleteModal');
    if (!modalEl) return;

    modalEl.addEventListener('show.bs.modal', function (ev) {
        const btn = ev.relatedTarget;
        if (!btn) return;
        const id = btn.getAttribute('data-id') || '';
        const name = btn.getAttribute('data-name') || '';
        document.getElementById('deleteRoutineId').value = id;
        document.getElementById('deleteRoutineName').textContent = name;
    });
});
</script>
}
